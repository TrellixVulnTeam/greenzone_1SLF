Decisions the cookiecutter backend option sqlalchemy has made for you

When creating a project and selecting the backend option of sqlalchemy, the cookiecutter makes the following assumptions:

    You are willing to use SQLite for persistent storage, although almost any SQL database could be used with SQLAlchemy.

    You are willing to use SQLAlchemy for a database access tool.

    You are willing to use Alembic for a database migrations tool.

    You are willing to use a console script for a data loading tool.

    You are willing to use URL dispatch to map URLs to code.

    You want to use zope.sqlalchemy, pyramid_tm, and the transaction packages to scope sessions to requests.


- - -

Alembic overview

Let's briefly discuss our configuration for Alembic.

In the alchemy cookiecutter's development.ini file, the setting for script_location configures Alembic to look for the migration
script in the directory tutorial/alembic. By default Alembic stores the migration files one level deeper in tutorial/alembic/vers
ions. These files are generated by Alembic, then executed when we run upgrade or downgrade migrations. The setting file_template
provides the format for each migration's file name. We've configured the file_template setting to make it somewhat easy to find m
igrations by file name.

At this point in this tutorial, we have two migration files. Examine them to see what Alembic will do when you upgrade or downgra
de the database to a specific revision. Notice the revision identifiers and how they relate to one another in a chained sequence.
https://alembic.sqlalchemy.org/en/latest/